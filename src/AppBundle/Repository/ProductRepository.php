<?php

namespace AppBundle\Repository;

use AppBundle\Model\BackendProductSearch\ProductSearchConditions;
use AppBundle\Model\BackendProductSearch\QueryConditionInterface;
use AppBundle\Model\BackendProductSearch\QueryConditionsContainer;
use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    /**
     * @param QueryConditionsContainer|null $queryConditions
     * @return \Doctrine\ORM\Query
     */
    public function getQueryForAdminPagination(QueryConditionsContainer $queryConditions = null)
    {
        $queryBuilder = $this->generateQueryForAdminSearch($queryConditions);

        return $queryBuilder->getQuery();
    }

    /**
     * @param QueryConditionsContainer|null $queryConditions
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function generateQueryForAdminSearch(QueryConditionsContainer $queryConditions = null)
    {
        $queryBuilder = $this->getEntityManager()
            ->createQueryBuilder();


        $queryBuilder
            ->select('p.id, 
            p.name, 
            p.isVisible, 
            p.isAvailable, 
            p.onStockAmount, 
            p.price.amount AS price, 
            p.price.currency AS currency,
            p.introduction, 
            p.description')
            ->from('AppBundle:Product', 'p');

        if (!is_null($queryConditions) && $queryConditions->hasQueryConditions()) {
            $andX = $queryBuilder->expr()->andX();
            foreach ($queryConditions->getQueryConditions() as $queryCondition) {
                $andX->add($queryCondition->getQueryExpression());
                $parameter = $queryCondition->getParameter();
                $queryBuilder->setParameter($parameter->getParameterAlias(), $parameter->getParameterValue());
            }
            $queryBuilder->add('where', $andX);
        };

        return $queryBuilder;
    }
}
